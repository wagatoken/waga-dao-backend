// SPDX-License-Identifier: MIT
pragma solidity ^0.8.24;

import {Script} from "forge-std/Script.sol";
import {console} from "forge-std/console.sol";
import {WAGACoffeeInventoryTokenV2} from "../src/shared/WAGACoffeeInventoryTokenV2.sol";
import {CooperativeGrantManagerV2} from "../src/base/CooperativeGrantManagerV2.sol";
import {GreenfieldProjectManager} from "../src/managers/GreenfieldProjectManager.sol";
import {HelperConfig} from "./HelperConfig.s.sol";

/**
 * @title DeployWAGADAOV2
 * @dev Deployment script for the refactored WAGA DAO architecture
 */
contract DeployWAGADAOV2 is Script {
    
    struct DeployedContracts {
        GreenfieldProjectManager greenfieldManager;
        WAGACoffeeInventoryTokenV2 coffeeInventoryToken;
        CooperativeGrantManagerV2 grantManager;
    }
    
    function run() external returns (DeployedContracts memory) {
        HelperConfig helperConfig = new HelperConfig();
        HelperConfig.NetworkConfig memory config = helperConfig.getConfigByChainId(block.chainid);
        
        address deployerAccount = vm.addr(vm.envUint("PRIVATE_KEY"));
        
        vm.startBroadcast();
        
        // Deploy components in order of dependencies
        
        // 1. Deploy Greenfield Project Manager (no dependencies)
        GreenfieldProjectManager greenfieldManager = new GreenfieldProjectManager(
            address(0), // Will be set after coffee token deployment
            deployerAccount
        );
        console.log("GreenfieldProjectManager deployed at:", address(greenfieldManager));
        
        // 2. Deploy Coffee Inventory Token (depends on greenfield manager)
        WAGACoffeeInventoryTokenV2 coffeeInventoryToken = new WAGACoffeeInventoryTokenV2(
            deployerAccount,
            address(greenfieldManager)
        );
        console.log("WAGACoffeeInventoryTokenV2 deployed at:", address(coffeeInventoryToken));
        
        // 3. Deploy Cooperative Grant Manager (depends on both)
        CooperativeGrantManagerV2 grantManager = new CooperativeGrantManagerV2(
            config.usdcToken,
            address(coffeeInventoryToken),
            address(greenfieldManager),
            deployerAccount, // treasury
            deployerAccount  // admin
        );
        console.log("CooperativeGrantManagerV2 deployed at:", address(grantManager));
        
        // 4. Set up cross-contract permissions
        _setupPermissions(
            coffeeInventoryToken,
            grantManager,
            greenfieldManager,
            deployerAccount
        );
        
        vm.stopBroadcast();
        
        return DeployedContracts({
            greenfieldManager: greenfieldManager,
            coffeeInventoryToken: coffeeInventoryToken,
            grantManager: grantManager
        });
    }
    
    function _setupPermissions(
        WAGACoffeeInventoryTokenV2 coffeeToken,
        CooperativeGrantManagerV2 grantManager,
        GreenfieldProjectManager greenfieldManager,
        address admin
    ) internal {
        
        // Grant manager permissions on coffee token
        coffeeToken.grantRole(coffeeToken.DAO_ADMIN_ROLE(), address(grantManager));
        coffeeToken.grantRole(coffeeToken.MINTER_ROLE(), address(grantManager));
        
        // Greenfield manager permissions
        greenfieldManager.grantRole(greenfieldManager.PROJECT_MANAGER_ROLE(), address(grantManager));
        greenfieldManager.grantRole(greenfieldManager.PROJECT_MANAGER_ROLE(), admin);
        
        console.log("Permissions configured successfully");
    }
}
